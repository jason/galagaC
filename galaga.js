// Generated by CoffeeScript 1.4.0
(function() {
  var Alien, Bullet, Game, Hero, Ship, canvas, game, height, width,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Game = (function() {

    function Game(canvas) {
      this.canvas = canvas;
      this.update = __bind(this.update, this);

      this.ctx = this.canvas.getContext('2d');
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      this.FPS = 60;
      this.hero = new Hero(this.width / 2, this.height - 40);
      this.score = 0;
      this.aliens = [];
      this.setAlienGrid();
    }

    Game.prototype.update = function() {
      var alien, bullet, _i, _j, _len, _len1, _ref, _ref1;
      this.checkUserMovement();
      _ref = this.hero.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        bullet.update();
      }
      _ref1 = this.aliens;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        alien = _ref1[_j];
        alien.update();
      }
      this.checkCollisions();
      this.removeOffScreenObjects();
      return this.draw();
    };

    Game.prototype.draw = function() {
      var alien, bullet, _i, _j, _len, _len1, _ref, _ref1;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.hero.draw(this.ctx);
      _ref = this.hero.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        bullet.draw(this.ctx);
      }
      _ref1 = this.aliens;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        alien = _ref1[_j];
        alien.draw(this.ctx);
      }
      return this.showScore();
    };

    Game.prototype.showScore = function() {
      this.ctx.beginPath();
      this.ctx.font = "bold 36px sans-serif";
      this.ctx.fillStyle = "white";
      this.ctx.fillText("Score: " + this.score, 100, 100);
      return this.ctx.closePath();
    };

    Game.prototype.checkCollisions = function() {
      var alien, bullet, deadAliens, deadBullets, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results,
        _this = this;
      deadAliens = [];
      deadBullets = [];
      _ref = this.hero.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        _ref1 = this.aliens;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          alien = _ref1[_j];
          if (alien.isHit(bullet)) {
            alien.explode(this.ctx);
            deadBullets.push(bullet);
            deadAliens.push(alien);
            this.score += 50;
          }
        }
      }
      this.hero.bullets = _.difference(this.hero.bullets, deadBullets);
      setTimeout(function() {
        return _this.aliens = _.difference(_this.aliens, deadAliens);
      }, 650);
      _ref2 = this.aliens;
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        alien = _ref2[_k];
        if (alien.isHit(this.hero)) {
          alien.explode();
          _results.push(this.gameOver());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.gameOver = function() {
      clearInterval(this.timer);
      return alert("Death to Vader! All hail Luke!");
    };

    Game.prototype.setAlienGrid = function() {
      var _this = this;
      this.alienRows = [];
      this.rowHeight = 100;
      _.times(parseInt((this.height - 200) / this.rowHeight, 10), function(i) {
        return _this.alienRows.push((i + 1) * _this.rowHeight);
      });
      return this.availableRow = 0;
    };

    Game.prototype.createAlienWave = function() {
      var alienCount, maxAliens, pos, positions, _i, _len, _results,
        _this = this;
      maxAliens = this.width / 100;
      alienCount = Math.floor(Math.random() * (maxAliens - 5)) + 2;
      positions = [];
      _.times(alienCount, function(i) {
        return positions.push([(i + 1) * 100 + ((_this.width - alienCount * 100) / 2), _this.alienRows[_this.availableRow]]);
      });
      if (this.availableRow >= this.alienRows.length - 1) {
        this.availableRow = 0;
      } else {

      }
      _results = [];
      for (_i = 0, _len = positions.length; _i < _len; _i++) {
        pos = positions[_i];
        _results.push(this.aliens.push(new Alien(pos[0], pos[1])));
      }
      return _results;
    };

    Game.prototype.removeOffScreenObjects = function() {
      var alien, bullet, offScreenAliens, offScreenBullets, _i, _j, _len, _len1, _ref, _ref1;
      offScreenBullets = [];
      _ref = this.hero.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (this.offScreen(bullet)) {
          offScreenBullets.push(bullet);
        }
      }
      this.hero.bullets = _.difference(this.hero.bullets, offScreenBullets);
      offScreenAliens = [];
      _ref1 = this.aliens;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        alien = _ref1[_j];
        if (this.offScreen(alien)) {
          offScreenAliens.push(alien);
        }
      }
      return this.aliens = _.difference(this.aliens, offScreenAliens);
    };

    Game.prototype.offScreen = function(obj) {
      return obj.posX > this.width || obj.posX < 0 || obj.posY > this.height || obj.posY < 0;
    };

    Game.prototype.start = function() {
      var _this = this;
      this.createAlienWave();
      setInterval(function() {
        return _this.createAlienWave();
      }, 2000);
      return this.loop();
    };

    Game.prototype.loop = function() {
      this.bindFireKey();
      return this.timer = setInterval(this.update, 1000 / this.FPS);
    };

    Game.prototype.checkUserMovement = function() {
      this.hero.image = this.hero.straightImage;
      if (key.isPressed('left')) {
        this.hero.move(-1);
        this.hero.image = this.hero.leftImage;
      }
      if (key.isPressed('right')) {
        this.hero.move(1);
        return this.hero.image = this.hero.rightImage;
      }
    };

    Game.prototype.bindFireKey = function() {
      var _this = this;
      return key('space', function() {
        return _this.hero.fire();
      });
    };

    return Game;

  })();

  Ship = (function() {

    function Ship(posX, posY) {
      this.posX = posX;
      this.posY = posY;
      this.exploded = false;
      this.explosionImages = _.times(6, function(i) {
        return document.getElementById("explosion" + (i + 1));
      });
      this.width = 75;
      this.height = 50;
    }

    Ship.prototype.draw = function(ctx) {
      var height, width;
      if (!this.exploded) {
        width = 75;
        height = 50;
        return ctx.drawImage(this.image, this.posX - width / 2, this.posY - height / 2, width, height);
      } else {
        return ctx.drawImage(this.image, this.posX - 15, this.posY - 25);
      }
    };

    Ship.prototype.explode = function(ctx) {
      var i, timer,
        _this = this;
      this.exploded = true;
      this.image = this.explosionImages[0];
      i = 1;
      return timer = setInterval(function() {
        if (i >= _this.explosionImages.length - 1) {
          clearInterval(timer);
        }
        _this.image = _this.explosionImages[i];
        return i++;
      }, 100);
    };

    Ship.prototype.isHit = function(obj) {
      return this.distanceTo(obj) < 30;
    };

    Ship.prototype.distanceTo = function(obj) {
      return Math.pow(Math.pow(this.posX - obj.posX, 2) + Math.pow(this.posY - obj.posY, 2), 0.5);
    };

    return Ship;

  })();

  Alien = (function(_super) {

    __extends(Alien, _super);

    function Alien(posX, posY) {
      var _this = this;
      this.posX = posX;
      this.posY = posY;
      Alien.__super__.constructor.call(this, this.posX, this.posY);
      this.image = document.getElementById('xwing');
      this.velocity = {
        x: 0,
        y: 1
      };
      setInterval(function() {
        return _this.velocity.x = Math.random() * 10 - 5;
      }, 300);
    }

    Alien.prototype.update = function() {
      this.posX += this.velocity.x;
      return this.posY += this.velocity.y;
    };

    return Alien;

  })(Ship);

  Hero = (function(_super) {

    __extends(Hero, _super);

    function Hero(posX, posY) {
      this.posX = posX;
      this.posY = posY;
      Hero.__super__.constructor.call(this, this.posX, this.posY);
      this.bullets = [];
      this.speed = 8;
      this.image = document.getElementById('tiefighter');
      this.straightImage = document.getElementById('tiefighter');
      this.leftImage = document.getElementById('left-tiefighter');
      this.rightImage = document.getElementById('right-tiefighter');
    }

    Hero.prototype.move = function(dir) {
      return this.posX += dir === 1 ? this.speed : -this.speed;
    };

    Hero.prototype.fire = function() {
      return this.bullets.push(new Bullet(this.posX, this.posY, 'up'));
    };

    return Hero;

  })(Ship);

  Bullet = (function() {

    function Bullet(posX, posY, dir) {
      this.posX = posX;
      this.posY = posY;
      this.dir = dir;
      this.color = 'red';
      this.size = 30;
      this.speed = 10;
    }

    Bullet.prototype.draw = function(ctx) {
      ctx.beginPath();
      ctx.moveTo(this.posX, this.posY);
      ctx.lineTo(this.posX, this.posY - this.size);
      ctx.strokeStyle = this.color;
      ctx.stroke();
      return ctx.closePath();
    };

    Bullet.prototype.update = function() {
      if (this.dir = 'up') {
        return this.posY -= this.speed;
      } else {
        return this.posY += this.speed;
      }
    };

    return Bullet;

  })();

  width = document.body.clientWidth - 100;

  height = document.body.clientHeight - 100;

  canvas = document.getElementById('game');

  canvas.setAttribute('width', width);

  canvas.setAttribute('height', height);

  game = new Game(canvas);

  game.start();

}).call(this);
