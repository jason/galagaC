// Generated by CoffeeScript 1.4.0
(function() {
  var Alien, Bullet, Game, Ship, canvas, game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {

    function Game(canvas) {
      this.canvas = canvas;
      this.update = __bind(this.update, this);

      this.ctx = this.canvas.getContext('2d');
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      this.ship = new Ship(this.canvas.width / 2, this.height - 40);
      this.FPS = 60;
      this.aliens = [];
    }

    Game.prototype.update = function() {
      var alien, bullet, _i, _j, _len, _len1, _ref, _ref1;
      this.checkMovement();
      this.createAliens();
      _ref = this.ship.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        bullet.update();
      }
      _ref1 = this.aliens;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        alien = _ref1[_j];
        alien.update();
      }
      this.removeOffScreenBullets();
      return this.draw();
    };

    Game.prototype.draw = function() {
      var alien, bullet, _i, _j, _len, _len1, _ref, _ref1, _results;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ship.draw(this.ctx);
      _ref = this.ship.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        bullet.draw(this.ctx);
      }
      _ref1 = this.aliens;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        alien = _ref1[_j];
        _results.push(alien.draw(this.ctx));
      }
      return _results;
    };

    Game.prototype.createAliens = function() {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 1; i = ++_i) {
        _results.push(this.aliens.push(new Alien(100, 100)));
      }
      return _results;
    };

    Game.prototype.removeOffScreenBullets = function() {
      var bullet, offScreen, _i, _len, _ref;
      offScreen = [];
      _ref = this.ship.bullets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        bullet = _ref[_i];
        if (bullet.posX > this.width || bullet.posX < 0 || bullet.posY > this.height || bullet.posY < 0) {
          offScreen.push(bullet);
        }
      }
      return this.ship.bullets = _.difference(this.ship.bullets, offScreen);
    };

    Game.prototype.loop = function() {
      this.bindFireKey();
      return this.timer = setInterval(this.update, 1000 / this.FPS);
    };

    Game.prototype.checkMovement = function() {
      if (key.isPressed('left')) {
        this.ship.move(-1);
      }
      if (key.isPressed('right')) {
        return this.ship.move(1);
      }
    };

    Game.prototype.bindFireKey = function() {
      var _this = this;
      return key('space', function() {
        return _this.ship.fire();
      });
    };

    return Game;

  })();

  Alien = (function() {

    function Alien(posX, posY) {
      this.posX = posX;
      this.posY = posY;
      this.size = 20;
    }

    Alien.prototype.draw = function(ctx) {
      var bodyColor, bodyLength, bodyWidth, gunColor, gunLength, gunWidth, wingColor, wingHeight, wingspan;
      wingColor = "rgb(255, 255, 255)";
      bodyColor = "rgb(255, 0, 0)";
      bodyLength = 60;
      bodyWidth = 10;
      gunColor = "rgb(255, 0, 0)";
      gunLength = 30;
      wingspan = 55;
      wingHeight = 15;
      ctx.beginPath();
      ctx.fillStyle = wingColor;
      ctx.fillRect(this.posX - wingspan / 2, this.posY, wingspan, wingHeight);
      ctx.closePath();
      ctx.beginPath();
      ctx.moveTo(this.posX - bodyWidth, this.posY);
      ctx.lineTo(this.posX, this.posY + bodyLength);
      ctx.lineTo(this.posX + bodyWidth, this.posY);
      ctx.fillStyle = bodyColor;
      ctx.fill();
      ctx.closePath();
      gunWidth = 5;
      ctx.fillStyle = gunColor;
      ctx.beginPath();
      ctx.fillRect(this.posX + wingspan / 2, this.posY, gunWidth, gunLength);
      ctx.fillRect(this.posX - wingspan / 2, this.posY, gunWidth, gunLength);
      ctx.fill();
      return ctx.closePath();
    };

    Alien.prototype.update = function() {};

    return Alien;

  })();

  Ship = (function() {

    function Ship(posX, posY) {
      this.posX = posX;
      this.posY = posY;
      this.size = 20;
      this.color = "rgb(125, 125, 125)";
      this.bullets = [];
      this.speed = 8;
    }

    Ship.prototype.move = function(dir) {
      return this.posX += dir === 1 ? this.speed : -this.speed;
    };

    Ship.prototype.fire = function() {
      return this.bullets.push(new Bullet(this.posX, this.posY - this.size));
    };

    Ship.prototype.draw = function(ctx) {
      var connectorSize, wingSize;
      ctx.beginPath();
      ctx.arc(this.posX, this.posY, this.size, 0, 2 * Math.PI, true);
      ctx.fillStyle = this.color;
      ctx.fill();
      ctx.closePath();
      ctx.beginPath();
      ctx.lineWidth = 5;
      connectorSize = 10;
      ctx.moveTo(this.posX + this.size, this.posY);
      ctx.lineTo(this.posX + this.size + connectorSize, this.posY);
      ctx.moveTo(this.posX - this.size, this.posY);
      ctx.lineTo(this.posX - this.size - connectorSize, this.posY);
      wingSize = 25;
      ctx.moveTo(this.posX + this.size + connectorSize, this.posY - wingSize);
      ctx.lineTo(this.posX + this.size + connectorSize, this.posY + wingSize);
      ctx.moveTo(this.posX - this.size - connectorSize, this.posY - wingSize);
      ctx.lineTo(this.posX - this.size - connectorSize, this.posY + wingSize);
      ctx.strokeStyle = this.color;
      ctx.stroke();
      return ctx.closePath();
    };

    return Ship;

  })();

  Bullet = (function() {

    function Bullet(posX, posY) {
      this.posX = posX;
      this.posY = posY;
      this.color = 'red';
      this.size = 30;
      this.speed = 10;
    }

    Bullet.prototype.draw = function(ctx) {
      ctx.beginPath();
      ctx.moveTo(this.posX, this.posY);
      ctx.lineTo(this.posX, this.posY - this.size);
      ctx.strokeStyle = this.color;
      ctx.stroke();
      return ctx.closePath();
    };

    Bullet.prototype.update = function() {
      return this.posY -= this.speed;
    };

    return Bullet;

  })();

  canvas = document.getElementById('game');

  game = new Game(canvas);

  game.loop();

}).call(this);
